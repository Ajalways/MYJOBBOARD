import OpenAI from 'openai';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Check if OpenAI is configured
export const isOpenAIConfigured = () => {
  return !!process.env.OPENAI_API_KEY;
};

// Generate a forensic accounting challenge using OpenAI
export const generateChallenge = async (jobTitle, jobDescription, difficulty, topic) => {
  if (!isOpenAIConfigured()) {
    throw new Error('OpenAI API key not configured');
  }

  const difficultyDescriptions = {
    'SIMPLE': 'basic level, suitable for entry-level professionals',
    'MEDIUM': 'intermediate level, requiring some experience',
    'COMPLEX': 'advanced level, requiring significant expertise'
  };

  const topicDescriptions = {
    'fraud_detection': 'fraud detection and prevention',
    'financial_investigation': 'financial investigation and forensic analysis',
    'litigation_support': 'litigation support and expert testimony',
    'compliance': 'regulatory compliance and internal controls',
    'asset_tracing': 'asset tracing and recovery',
    'data_analysis': 'financial data analysis and pattern recognition'
  };

  const prompt = `
Create a ${difficultyDescriptions[difficulty]} forensic accounting challenge focused on ${topicDescriptions[topic] || topic}.

Job Context:
- Position: ${jobTitle}
- Description: ${jobDescription}

Please generate:
1. A realistic challenge scenario/question (2-3 paragraphs)
2. A comprehensive answer key with step-by-step solution
3. A detailed scoring rubric (100 points total)

Format your response as JSON with these exact keys:
{
  "prompt": "The challenge question/scenario here",
  "answer_key": "Detailed solution and methodology here",
  "scoring_rubric": "Point breakdown for scoring submissions here"
}

The challenge should be practical, realistic, and test the candidate's ability to:
- Apply forensic accounting principles
- Analyze financial data
- Identify red flags or irregularities
- Document findings professionally
- Apply relevant standards and procedures
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are an expert forensic accountant creating professional challenges for candidate assessment. Always respond with valid JSON format."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const content = completion.choices[0].message.content;
    
    try {
      const parsed = JSON.parse(content);
      return {
        prompt: parsed.prompt,
        answer_key: parsed.answer_key,
        scoring_rubric: parsed.scoring_rubric
      };
    } catch (parseError) {
      // Fallback if JSON parsing fails
      return {
        prompt: content,
        answer_key: "Generated by AI - review required",
        scoring_rubric: "Comprehensive assessment: Technical accuracy (40%), Methodology (30%), Professional presentation (30%)"
      };
    }
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error('Failed to generate challenge with AI');
  }
};

// Score a challenge submission using OpenAI
export const scoreSubmission = async (challengePrompt, answerKey, scoringRubric, submission) => {
  if (!isOpenAIConfigured()) {
    throw new Error('OpenAI API key not configured');
  }

  const prompt = `
As an expert forensic accountant, please score this candidate's submission:

CHALLENGE:
${challengePrompt}

ANSWER KEY:
${answerKey}

SCORING RUBRIC:
${scoringRubric}

CANDIDATE SUBMISSION:
${submission}

Please provide:
1. A numerical score out of 100
2. Detailed feedback explaining the score
3. Specific strengths and areas for improvement

Format your response as JSON with these exact keys:
{
  "score": 85,
  "feedback": "Detailed feedback explaining the score, strengths, and areas for improvement"
}
`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are an expert forensic accountant evaluating candidate submissions. Provide fair, constructive feedback and accurate scoring based on the rubric."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3, // Lower temperature for more consistent scoring
      max_tokens: 1000
    });

    const content = completion.choices[0].message.content;
    
    try {
      const parsed = JSON.parse(content);
      return {
        score: Math.min(100, Math.max(0, parsed.score || 0)), // Ensure score is between 0-100
        feedback: parsed.feedback || "AI scoring completed"
      };
    } catch (parseError) {
      // Fallback scoring
      return {
        score: 75,
        feedback: "AI scoring completed. Please review manually for detailed feedback."
      };
    }
  } catch (error) {
    console.error('OpenAI scoring error:', error);
    throw new Error('Failed to score submission with AI');
  }
};
